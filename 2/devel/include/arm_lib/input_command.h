// Generated by gencpp from file arm_lib/input_command.msg
// DO NOT EDIT!


#ifndef ARM_LIB_MESSAGE_INPUT_COMMAND_H
#define ARM_LIB_MESSAGE_INPUT_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_lib
{
template <class ContainerAllocator>
struct input_command_
{
  typedef input_command_<ContainerAllocator> Type;

  input_command_()
    : command_name()  {
    }
  input_command_(const ContainerAllocator& _alloc)
    : command_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_name_type;
  _command_name_type command_name;





  typedef boost::shared_ptr< ::arm_lib::input_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_lib::input_command_<ContainerAllocator> const> ConstPtr;

}; // struct input_command_

typedef ::arm_lib::input_command_<std::allocator<void> > input_command;

typedef boost::shared_ptr< ::arm_lib::input_command > input_commandPtr;
typedef boost::shared_ptr< ::arm_lib::input_command const> input_commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_lib::input_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_lib::input_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_lib::input_command_<ContainerAllocator1> & lhs, const ::arm_lib::input_command_<ContainerAllocator2> & rhs)
{
  return lhs.command_name == rhs.command_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_lib::input_command_<ContainerAllocator1> & lhs, const ::arm_lib::input_command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_lib

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_lib::input_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_lib::input_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::input_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::input_command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::input_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::input_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_lib::input_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2dfd1798f31c69c161b1e153f444d458";
  }

  static const char* value(const ::arm_lib::input_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2dfd1798f31c69c1ULL;
  static const uint64_t static_value2 = 0x61b1e153f444d458ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_lib::input_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_lib/input_command";
  }

  static const char* value(const ::arm_lib::input_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_lib::input_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command_name\n"
;
  }

  static const char* value(const ::arm_lib::input_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_lib::input_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct input_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_lib::input_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_lib::input_command_<ContainerAllocator>& v)
  {
    s << indent << "command_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_LIB_MESSAGE_INPUT_COMMAND_H
